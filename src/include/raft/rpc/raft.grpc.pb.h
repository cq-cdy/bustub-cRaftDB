// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: raft.proto
#ifndef GRPC_raft_2eproto__INCLUDED
#define GRPC_raft_2eproto__INCLUDED

#include "raft.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class RaftRPC final {
 public:
  static constexpr char const* service_full_name() {
    return "RaftRPC";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status installSnapshot(::grpc::ClientContext* context, const ::InstallSnapshotArgs& request, ::InstallSnapshotReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InstallSnapshotReply>> AsyncinstallSnapshot(::grpc::ClientContext* context, const ::InstallSnapshotArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InstallSnapshotReply>>(AsyncinstallSnapshotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InstallSnapshotReply>> PrepareAsyncinstallSnapshot(::grpc::ClientContext* context, const ::InstallSnapshotArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InstallSnapshotReply>>(PrepareAsyncinstallSnapshotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::TransferSnapShotFileArgs>> TransferSnapShotFile(::grpc::ClientContext* context, ::TransferSnapShotFileReply* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::TransferSnapShotFileArgs>>(TransferSnapShotFileRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::TransferSnapShotFileArgs>> AsyncTransferSnapShotFile(::grpc::ClientContext* context, ::TransferSnapShotFileReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::TransferSnapShotFileArgs>>(AsyncTransferSnapShotFileRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::TransferSnapShotFileArgs>> PrepareAsyncTransferSnapShotFile(::grpc::ClientContext* context, ::TransferSnapShotFileReply* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::TransferSnapShotFileArgs>>(PrepareAsyncTransferSnapShotFileRaw(context, response, cq));
    }
    virtual ::grpc::Status submitCommand(::grpc::ClientContext* context, const ::Command& request, ::ResultPackge* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ResultPackge>> AsyncsubmitCommand(::grpc::ClientContext* context, const ::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ResultPackge>>(AsyncsubmitCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ResultPackge>> PrepareAsyncsubmitCommand(::grpc::ClientContext* context, const ::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ResultPackge>>(PrepareAsyncsubmitCommandRaw(context, request, cq));
    }
    virtual ::grpc::Status requestVoteRPC(::grpc::ClientContext* context, const ::RequestVoteArgs& request, ::RequestVoteReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RequestVoteReply>> AsyncrequestVoteRPC(::grpc::ClientContext* context, const ::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RequestVoteReply>>(AsyncrequestVoteRPCRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RequestVoteReply>> PrepareAsyncrequestVoteRPC(::grpc::ClientContext* context, const ::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RequestVoteReply>>(PrepareAsyncrequestVoteRPCRaw(context, request, cq));
    }
    virtual ::grpc::Status appendEntries(::grpc::ClientContext* context, const ::AppendEntriesArgs& request, ::AppendEntriesReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AppendEntriesReply>> AsyncappendEntries(::grpc::ClientContext* context, const ::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AppendEntriesReply>>(AsyncappendEntriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AppendEntriesReply>> PrepareAsyncappendEntries(::grpc::ClientContext* context, const ::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AppendEntriesReply>>(PrepareAsyncappendEntriesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void installSnapshot(::grpc::ClientContext* context, const ::InstallSnapshotArgs* request, ::InstallSnapshotReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void installSnapshot(::grpc::ClientContext* context, const ::InstallSnapshotArgs* request, ::InstallSnapshotReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TransferSnapShotFile(::grpc::ClientContext* context, ::TransferSnapShotFileReply* response, ::grpc::ClientWriteReactor< ::TransferSnapShotFileArgs>* reactor) = 0;
      virtual void submitCommand(::grpc::ClientContext* context, const ::Command* request, ::ResultPackge* response, std::function<void(::grpc::Status)>) = 0;
      virtual void submitCommand(::grpc::ClientContext* context, const ::Command* request, ::ResultPackge* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void requestVoteRPC(::grpc::ClientContext* context, const ::RequestVoteArgs* request, ::RequestVoteReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void requestVoteRPC(::grpc::ClientContext* context, const ::RequestVoteArgs* request, ::RequestVoteReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void appendEntries(::grpc::ClientContext* context, const ::AppendEntriesArgs* request, ::AppendEntriesReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void appendEntries(::grpc::ClientContext* context, const ::AppendEntriesArgs* request, ::AppendEntriesReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InstallSnapshotReply>* AsyncinstallSnapshotRaw(::grpc::ClientContext* context, const ::InstallSnapshotArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InstallSnapshotReply>* PrepareAsyncinstallSnapshotRaw(::grpc::ClientContext* context, const ::InstallSnapshotArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::TransferSnapShotFileArgs>* TransferSnapShotFileRaw(::grpc::ClientContext* context, ::TransferSnapShotFileReply* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::TransferSnapShotFileArgs>* AsyncTransferSnapShotFileRaw(::grpc::ClientContext* context, ::TransferSnapShotFileReply* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::TransferSnapShotFileArgs>* PrepareAsyncTransferSnapShotFileRaw(::grpc::ClientContext* context, ::TransferSnapShotFileReply* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ResultPackge>* AsyncsubmitCommandRaw(::grpc::ClientContext* context, const ::Command& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ResultPackge>* PrepareAsyncsubmitCommandRaw(::grpc::ClientContext* context, const ::Command& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RequestVoteReply>* AsyncrequestVoteRPCRaw(::grpc::ClientContext* context, const ::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RequestVoteReply>* PrepareAsyncrequestVoteRPCRaw(::grpc::ClientContext* context, const ::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AppendEntriesReply>* AsyncappendEntriesRaw(::grpc::ClientContext* context, const ::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AppendEntriesReply>* PrepareAsyncappendEntriesRaw(::grpc::ClientContext* context, const ::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status installSnapshot(::grpc::ClientContext* context, const ::InstallSnapshotArgs& request, ::InstallSnapshotReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InstallSnapshotReply>> AsyncinstallSnapshot(::grpc::ClientContext* context, const ::InstallSnapshotArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InstallSnapshotReply>>(AsyncinstallSnapshotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InstallSnapshotReply>> PrepareAsyncinstallSnapshot(::grpc::ClientContext* context, const ::InstallSnapshotArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InstallSnapshotReply>>(PrepareAsyncinstallSnapshotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::TransferSnapShotFileArgs>> TransferSnapShotFile(::grpc::ClientContext* context, ::TransferSnapShotFileReply* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::TransferSnapShotFileArgs>>(TransferSnapShotFileRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::TransferSnapShotFileArgs>> AsyncTransferSnapShotFile(::grpc::ClientContext* context, ::TransferSnapShotFileReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::TransferSnapShotFileArgs>>(AsyncTransferSnapShotFileRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::TransferSnapShotFileArgs>> PrepareAsyncTransferSnapShotFile(::grpc::ClientContext* context, ::TransferSnapShotFileReply* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::TransferSnapShotFileArgs>>(PrepareAsyncTransferSnapShotFileRaw(context, response, cq));
    }
    ::grpc::Status submitCommand(::grpc::ClientContext* context, const ::Command& request, ::ResultPackge* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ResultPackge>> AsyncsubmitCommand(::grpc::ClientContext* context, const ::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ResultPackge>>(AsyncsubmitCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ResultPackge>> PrepareAsyncsubmitCommand(::grpc::ClientContext* context, const ::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ResultPackge>>(PrepareAsyncsubmitCommandRaw(context, request, cq));
    }
    ::grpc::Status requestVoteRPC(::grpc::ClientContext* context, const ::RequestVoteArgs& request, ::RequestVoteReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RequestVoteReply>> AsyncrequestVoteRPC(::grpc::ClientContext* context, const ::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RequestVoteReply>>(AsyncrequestVoteRPCRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RequestVoteReply>> PrepareAsyncrequestVoteRPC(::grpc::ClientContext* context, const ::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RequestVoteReply>>(PrepareAsyncrequestVoteRPCRaw(context, request, cq));
    }
    ::grpc::Status appendEntries(::grpc::ClientContext* context, const ::AppendEntriesArgs& request, ::AppendEntriesReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AppendEntriesReply>> AsyncappendEntries(::grpc::ClientContext* context, const ::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AppendEntriesReply>>(AsyncappendEntriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AppendEntriesReply>> PrepareAsyncappendEntries(::grpc::ClientContext* context, const ::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AppendEntriesReply>>(PrepareAsyncappendEntriesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void installSnapshot(::grpc::ClientContext* context, const ::InstallSnapshotArgs* request, ::InstallSnapshotReply* response, std::function<void(::grpc::Status)>) override;
      void installSnapshot(::grpc::ClientContext* context, const ::InstallSnapshotArgs* request, ::InstallSnapshotReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TransferSnapShotFile(::grpc::ClientContext* context, ::TransferSnapShotFileReply* response, ::grpc::ClientWriteReactor< ::TransferSnapShotFileArgs>* reactor) override;
      void submitCommand(::grpc::ClientContext* context, const ::Command* request, ::ResultPackge* response, std::function<void(::grpc::Status)>) override;
      void submitCommand(::grpc::ClientContext* context, const ::Command* request, ::ResultPackge* response, ::grpc::ClientUnaryReactor* reactor) override;
      void requestVoteRPC(::grpc::ClientContext* context, const ::RequestVoteArgs* request, ::RequestVoteReply* response, std::function<void(::grpc::Status)>) override;
      void requestVoteRPC(::grpc::ClientContext* context, const ::RequestVoteArgs* request, ::RequestVoteReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void appendEntries(::grpc::ClientContext* context, const ::AppendEntriesArgs* request, ::AppendEntriesReply* response, std::function<void(::grpc::Status)>) override;
      void appendEntries(::grpc::ClientContext* context, const ::AppendEntriesArgs* request, ::AppendEntriesReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::InstallSnapshotReply>* AsyncinstallSnapshotRaw(::grpc::ClientContext* context, const ::InstallSnapshotArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InstallSnapshotReply>* PrepareAsyncinstallSnapshotRaw(::grpc::ClientContext* context, const ::InstallSnapshotArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::TransferSnapShotFileArgs>* TransferSnapShotFileRaw(::grpc::ClientContext* context, ::TransferSnapShotFileReply* response) override;
    ::grpc::ClientAsyncWriter< ::TransferSnapShotFileArgs>* AsyncTransferSnapShotFileRaw(::grpc::ClientContext* context, ::TransferSnapShotFileReply* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::TransferSnapShotFileArgs>* PrepareAsyncTransferSnapShotFileRaw(::grpc::ClientContext* context, ::TransferSnapShotFileReply* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ResultPackge>* AsyncsubmitCommandRaw(::grpc::ClientContext* context, const ::Command& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ResultPackge>* PrepareAsyncsubmitCommandRaw(::grpc::ClientContext* context, const ::Command& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RequestVoteReply>* AsyncrequestVoteRPCRaw(::grpc::ClientContext* context, const ::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RequestVoteReply>* PrepareAsyncrequestVoteRPCRaw(::grpc::ClientContext* context, const ::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AppendEntriesReply>* AsyncappendEntriesRaw(::grpc::ClientContext* context, const ::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AppendEntriesReply>* PrepareAsyncappendEntriesRaw(::grpc::ClientContext* context, const ::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_installSnapshot_;
    const ::grpc::internal::RpcMethod rpcmethod_TransferSnapShotFile_;
    const ::grpc::internal::RpcMethod rpcmethod_submitCommand_;
    const ::grpc::internal::RpcMethod rpcmethod_requestVoteRPC_;
    const ::grpc::internal::RpcMethod rpcmethod_appendEntries_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status installSnapshot(::grpc::ServerContext* context, const ::InstallSnapshotArgs* request, ::InstallSnapshotReply* response);
    virtual ::grpc::Status TransferSnapShotFile(::grpc::ServerContext* context, ::grpc::ServerReader< ::TransferSnapShotFileArgs>* reader, ::TransferSnapShotFileReply* response);
    virtual ::grpc::Status submitCommand(::grpc::ServerContext* context, const ::Command* request, ::ResultPackge* response);
    virtual ::grpc::Status requestVoteRPC(::grpc::ServerContext* context, const ::RequestVoteArgs* request, ::RequestVoteReply* response);
    virtual ::grpc::Status appendEntries(::grpc::ServerContext* context, const ::AppendEntriesArgs* request, ::AppendEntriesReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_installSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_installSnapshot() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_installSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status installSnapshot(::grpc::ServerContext* /*context*/, const ::InstallSnapshotArgs* /*request*/, ::InstallSnapshotReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestinstallSnapshot(::grpc::ServerContext* context, ::InstallSnapshotArgs* request, ::grpc::ServerAsyncResponseWriter< ::InstallSnapshotReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TransferSnapShotFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TransferSnapShotFile() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_TransferSnapShotFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferSnapShotFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::TransferSnapShotFileArgs>* /*reader*/, ::TransferSnapShotFileReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferSnapShotFile(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::TransferSnapShotFileReply, ::TransferSnapShotFileArgs>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_submitCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_submitCommand() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_submitCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status submitCommand(::grpc::ServerContext* /*context*/, const ::Command* /*request*/, ::ResultPackge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsubmitCommand(::grpc::ServerContext* context, ::Command* request, ::grpc::ServerAsyncResponseWriter< ::ResultPackge>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_requestVoteRPC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_requestVoteRPC() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_requestVoteRPC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestVoteRPC(::grpc::ServerContext* /*context*/, const ::RequestVoteArgs* /*request*/, ::RequestVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestVoteRPC(::grpc::ServerContext* context, ::RequestVoteArgs* request, ::grpc::ServerAsyncResponseWriter< ::RequestVoteReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_appendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_appendEntries() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_appendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status appendEntries(::grpc::ServerContext* /*context*/, const ::AppendEntriesArgs* /*request*/, ::AppendEntriesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestappendEntries(::grpc::ServerContext* context, ::AppendEntriesArgs* request, ::grpc::ServerAsyncResponseWriter< ::AppendEntriesReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_installSnapshot<WithAsyncMethod_TransferSnapShotFile<WithAsyncMethod_submitCommand<WithAsyncMethod_requestVoteRPC<WithAsyncMethod_appendEntries<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_installSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_installSnapshot() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::InstallSnapshotArgs, ::InstallSnapshotReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::InstallSnapshotArgs* request, ::InstallSnapshotReply* response) { return this->installSnapshot(context, request, response); }));}
    void SetMessageAllocatorFor_installSnapshot(
        ::grpc::MessageAllocator< ::InstallSnapshotArgs, ::InstallSnapshotReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::InstallSnapshotArgs, ::InstallSnapshotReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_installSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status installSnapshot(::grpc::ServerContext* /*context*/, const ::InstallSnapshotArgs* /*request*/, ::InstallSnapshotReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* installSnapshot(
      ::grpc::CallbackServerContext* /*context*/, const ::InstallSnapshotArgs* /*request*/, ::InstallSnapshotReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TransferSnapShotFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TransferSnapShotFile() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::TransferSnapShotFileArgs, ::TransferSnapShotFileReply>(
            [this](
                   ::grpc::CallbackServerContext* context, ::TransferSnapShotFileReply* response) { return this->TransferSnapShotFile(context, response); }));
    }
    ~WithCallbackMethod_TransferSnapShotFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferSnapShotFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::TransferSnapShotFileArgs>* /*reader*/, ::TransferSnapShotFileReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::TransferSnapShotFileArgs>* TransferSnapShotFile(
      ::grpc::CallbackServerContext* /*context*/, ::TransferSnapShotFileReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_submitCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_submitCommand() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::Command, ::ResultPackge>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Command* request, ::ResultPackge* response) { return this->submitCommand(context, request, response); }));}
    void SetMessageAllocatorFor_submitCommand(
        ::grpc::MessageAllocator< ::Command, ::ResultPackge>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Command, ::ResultPackge>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_submitCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status submitCommand(::grpc::ServerContext* /*context*/, const ::Command* /*request*/, ::ResultPackge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* submitCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::Command* /*request*/, ::ResultPackge* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_requestVoteRPC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_requestVoteRPC() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::RequestVoteArgs, ::RequestVoteReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::RequestVoteArgs* request, ::RequestVoteReply* response) { return this->requestVoteRPC(context, request, response); }));}
    void SetMessageAllocatorFor_requestVoteRPC(
        ::grpc::MessageAllocator< ::RequestVoteArgs, ::RequestVoteReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::RequestVoteArgs, ::RequestVoteReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_requestVoteRPC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestVoteRPC(::grpc::ServerContext* /*context*/, const ::RequestVoteArgs* /*request*/, ::RequestVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* requestVoteRPC(
      ::grpc::CallbackServerContext* /*context*/, const ::RequestVoteArgs* /*request*/, ::RequestVoteReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_appendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_appendEntries() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::AppendEntriesArgs, ::AppendEntriesReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::AppendEntriesArgs* request, ::AppendEntriesReply* response) { return this->appendEntries(context, request, response); }));}
    void SetMessageAllocatorFor_appendEntries(
        ::grpc::MessageAllocator< ::AppendEntriesArgs, ::AppendEntriesReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::AppendEntriesArgs, ::AppendEntriesReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_appendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status appendEntries(::grpc::ServerContext* /*context*/, const ::AppendEntriesArgs* /*request*/, ::AppendEntriesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* appendEntries(
      ::grpc::CallbackServerContext* /*context*/, const ::AppendEntriesArgs* /*request*/, ::AppendEntriesReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_installSnapshot<WithCallbackMethod_TransferSnapShotFile<WithCallbackMethod_submitCommand<WithCallbackMethod_requestVoteRPC<WithCallbackMethod_appendEntries<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_installSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_installSnapshot() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_installSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status installSnapshot(::grpc::ServerContext* /*context*/, const ::InstallSnapshotArgs* /*request*/, ::InstallSnapshotReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TransferSnapShotFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TransferSnapShotFile() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_TransferSnapShotFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferSnapShotFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::TransferSnapShotFileArgs>* /*reader*/, ::TransferSnapShotFileReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_submitCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_submitCommand() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_submitCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status submitCommand(::grpc::ServerContext* /*context*/, const ::Command* /*request*/, ::ResultPackge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_requestVoteRPC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_requestVoteRPC() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_requestVoteRPC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestVoteRPC(::grpc::ServerContext* /*context*/, const ::RequestVoteArgs* /*request*/, ::RequestVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_appendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_appendEntries() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_appendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status appendEntries(::grpc::ServerContext* /*context*/, const ::AppendEntriesArgs* /*request*/, ::AppendEntriesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_installSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_installSnapshot() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_installSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status installSnapshot(::grpc::ServerContext* /*context*/, const ::InstallSnapshotArgs* /*request*/, ::InstallSnapshotReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestinstallSnapshot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TransferSnapShotFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TransferSnapShotFile() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_TransferSnapShotFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferSnapShotFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::TransferSnapShotFileArgs>* /*reader*/, ::TransferSnapShotFileReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferSnapShotFile(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_submitCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_submitCommand() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_submitCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status submitCommand(::grpc::ServerContext* /*context*/, const ::Command* /*request*/, ::ResultPackge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsubmitCommand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_requestVoteRPC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_requestVoteRPC() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_requestVoteRPC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestVoteRPC(::grpc::ServerContext* /*context*/, const ::RequestVoteArgs* /*request*/, ::RequestVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestVoteRPC(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_appendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_appendEntries() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_appendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status appendEntries(::grpc::ServerContext* /*context*/, const ::AppendEntriesArgs* /*request*/, ::AppendEntriesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestappendEntries(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_installSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_installSnapshot() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->installSnapshot(context, request, response); }));
    }
    ~WithRawCallbackMethod_installSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status installSnapshot(::grpc::ServerContext* /*context*/, const ::InstallSnapshotArgs* /*request*/, ::InstallSnapshotReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* installSnapshot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TransferSnapShotFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TransferSnapShotFile() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->TransferSnapShotFile(context, response); }));
    }
    ~WithRawCallbackMethod_TransferSnapShotFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferSnapShotFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::TransferSnapShotFileArgs>* /*reader*/, ::TransferSnapShotFileReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* TransferSnapShotFile(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_submitCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_submitCommand() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->submitCommand(context, request, response); }));
    }
    ~WithRawCallbackMethod_submitCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status submitCommand(::grpc::ServerContext* /*context*/, const ::Command* /*request*/, ::ResultPackge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* submitCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_requestVoteRPC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_requestVoteRPC() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->requestVoteRPC(context, request, response); }));
    }
    ~WithRawCallbackMethod_requestVoteRPC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestVoteRPC(::grpc::ServerContext* /*context*/, const ::RequestVoteArgs* /*request*/, ::RequestVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* requestVoteRPC(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_appendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_appendEntries() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->appendEntries(context, request, response); }));
    }
    ~WithRawCallbackMethod_appendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status appendEntries(::grpc::ServerContext* /*context*/, const ::AppendEntriesArgs* /*request*/, ::AppendEntriesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* appendEntries(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_installSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_installSnapshot() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::InstallSnapshotArgs, ::InstallSnapshotReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::InstallSnapshotArgs, ::InstallSnapshotReply>* streamer) {
                       return this->StreamedinstallSnapshot(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_installSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status installSnapshot(::grpc::ServerContext* /*context*/, const ::InstallSnapshotArgs* /*request*/, ::InstallSnapshotReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedinstallSnapshot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::InstallSnapshotArgs,::InstallSnapshotReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_submitCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_submitCommand() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Command, ::ResultPackge>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Command, ::ResultPackge>* streamer) {
                       return this->StreamedsubmitCommand(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_submitCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status submitCommand(::grpc::ServerContext* /*context*/, const ::Command* /*request*/, ::ResultPackge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsubmitCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Command,::ResultPackge>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_requestVoteRPC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_requestVoteRPC() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::RequestVoteArgs, ::RequestVoteReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::RequestVoteArgs, ::RequestVoteReply>* streamer) {
                       return this->StreamedrequestVoteRPC(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_requestVoteRPC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status requestVoteRPC(::grpc::ServerContext* /*context*/, const ::RequestVoteArgs* /*request*/, ::RequestVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrequestVoteRPC(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RequestVoteArgs,::RequestVoteReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_appendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_appendEntries() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::AppendEntriesArgs, ::AppendEntriesReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::AppendEntriesArgs, ::AppendEntriesReply>* streamer) {
                       return this->StreamedappendEntries(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_appendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status appendEntries(::grpc::ServerContext* /*context*/, const ::AppendEntriesArgs* /*request*/, ::AppendEntriesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedappendEntries(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AppendEntriesArgs,::AppendEntriesReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_installSnapshot<WithStreamedUnaryMethod_submitCommand<WithStreamedUnaryMethod_requestVoteRPC<WithStreamedUnaryMethod_appendEntries<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_installSnapshot<WithStreamedUnaryMethod_submitCommand<WithStreamedUnaryMethod_requestVoteRPC<WithStreamedUnaryMethod_appendEntries<Service > > > > StreamedService;
};


#endif  // GRPC_raft_2eproto__INCLUDED
